# This workflow will build a MuleSoft project and deploy to CloudHub

name: Build and Deploy to Sandbox

on:
  push:
    branches: [ master ]
    paths-ignore:
      - '.github/**'
  workflow_dispatch:
  
jobs:
  verify-directories:
    runs-on: ubuntu-latest
    name: Verify directories changed 
    outputs:
        matrix: ${{ steps.json-array.outputs.dirNamesArray }}
        
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0  # OR "2" -> To retrieve the preceding commit.

      - name: Run changed-files with dir_names
        id: changed-files-dir-names
        uses: tj-actions/changed-files@v29.0.1
        with:
          dir_names: "true"
          
      - name: List all changed files in directory
        id: list-dirs-changed
        run: |
          for file in ${{ steps.changed-files-dir-names.outputs.all_changed_files }}; do
            echo $file was changed
          done
        
      - name: Convert to json
        id: json-array
        run: |
          read -r -a array <<< '${{ steps.changed-files-dir-names.outputs.all_changed_files }}'
          
          json_array() {
            echo -n '['
            while [ $# -gt 0 ]; do
              x=${1//\\/\\\\}
              echo -n \"${x//\"/\\\"}\"
              [ $# -gt 1 ] && echo -n ', '
              shift
            done
            echo ']'
          }
          
          dirs=(`for path in "${array[@]}"; do echo "$(cut -d "/" -f1 <<< $path)"; done | sort -u`)
          
          arr="$(json_array "${dirs[@]}")"
          
          echo $arr

          echo "::set-output name=dirNamesArray::$arr"
    
    
  build:
    needs: verify-directories
    strategy:
      matrix: 
        dirs: ${{ fromJson(needs.verify-directories.outputs.matrix) }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/cache@v1
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Set up JDK 1.8
        uses: actions/setup-java@v1
        with:
          java-version: 1.8
    
      - name: Print effective-settings (optional)
        run: mvn help:effective-settings

      - name: Build with Maven
        working-directory: ${{ matrix.dirs }}
        run: mvn -B package --file pom.xml

      - name: Stamp artifact file name with commit hash
        working-directory: ${{ matrix.dirs }}
        run: |
          artifactName1=$(ls target/*.jar | head -1)
          commitHash=$(git rev-parse --short "$GITHUB_SHA")
          artifactName2=$(ls target/*.jar | head -1 | sed "s/.jar/-$commitHash.jar/g")
          mv $artifactName1 $artifactName2   

      - name: Upload artifact 
        uses: actions/upload-artifact@master
        with:
            name: artifacts
            path: ${{ matrix.dirs }}/target/*.jar
        
  deploy:
    needs: build
    runs-on: ubuntu-latest

    steps:    
    
    - uses: actions/checkout@v2
    
    - uses: actions/cache@v1
      with:
        path: ~/.m2/repository
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-maven-
    
    - uses: actions/download-artifact@master
      with:
        name: artifacts
    
    - name: Deploy to Sandbox
      env:
        USERNAME: ${{ secrets.USERNAME }}
        PASSWORD: ${{ secrets.PASSWORD }}
        CONN_APP_CLIENT_SECRET: ${{ secrets.CONN_APP_CLIENT_SECRET }}
        CONN_APP_CLIENT_ID: ${{ secrets.CONN_APP_CLIENT_ID }}
      working-directory: azuredatalake
      run: |
        artifactName=$(ls *.jar | head -1)
        mvn deploy -DmuleDeploy \
         -Dmule.artifact=$artifactName \
         -Danypoint.username="$USERNAME" \
         -Danypoint.password="$PASSWORD" \
         -Danypoint.CONN_APP_CLIENT_ID="$CONN_APP_CLIENT_ID" \
         -Danypoint.CONN_APP_CLIENT_SECRET="$CONN_APP_CLIENT_SECRET"
